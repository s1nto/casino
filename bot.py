import logging
from aiogram import Bot, Dispatcher, executor, types
from aiocryptopay import AioCryptoPay, Networks
import config
import random
import string
import requests

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

cryptopay = AioCryptoPay(config.CRYPTO_TOKEN, network=Networks.MAIN_NET)


async def pay_money(amount, id):
    try:
        payme = await cryptopay.create_check(asset='USDT', amount=amount)
        keyboard = types.InlineKeyboardMarkup()
        prize = types.InlineKeyboardButton(text="üéÅ", url=payme.bot_check_url)
        keyboard.add(prize)
        await bot.send_message(id, f'<b>[üí∏] –í—ã–ø–ª–∞—Ç–∞:\n</b>\n<blockquote><b>–°—É–º–º–∞: {amount}$</b></blockquote>',
                               reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(id,
                               f'<b>[‚õî] –û—à–∏–±–∫–∞...</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å <b>{amount}</b>!\n–ù–∞–ø–∏—à–∏—Ç–µ –¢–°-—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: https://t.me/+TdK4bwq6kRY3MTAy')
        for admid in config.ADMIN_IDS:
            await bot.send_message(admid,
                                   f"<b>–ê–õ–ï –ù–ê–•–£–ô!</b>\n–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É!\n\n–Æ–∑–µ—Ä: {id}\n–°—É–º–º–∞: {amount}\n\n–õ–æ–≥ –æ—à–∏–±–∫–∏: <b>{e}</b>")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("[üëã] –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–µ–µ CryptoCasino LastDeposit!")


@dp.channel_post_handler(chat_id=config.PAY_ID)
async def handle_new_bet(message: types.Message):
    try:
        bet_usd = float(message.text.split("($")[1].split(").")[0])
        bet_coment = message.text.split("üí¨ ")[1]
        bet_comment = bet_coment.lower()
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        user = message.entities[0].user
        player_id = user.id
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=config.pinned_link)
        keyboard.add(url_button)
        bet_design = config.bet.format(bet_usd=bet_usd, player_name=player_name, bet_comment=bet_comment)
        await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/new_bet.png", "rb"), caption=bet_design,
                             reply_markup=keyboard)
        if bet_comment.startswith("–∫—É–±"):
            if bet_comment in config.ag_dice:
                await handle_dice(message, bet_usd, bet_comment, player_id)
            else:
                await bot.send_message(config.MAIN_ID,
                                       "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå | –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –¢–°-—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.</b></blockquote>")
        else:
            await bot.send_message(config.MAIN_ID,
                                   "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå | –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –¢–°-—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.</b></blockquote>")
    except IndexError:
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        await bot.send_message(config.MAIN_ID,
                               f"<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote><b>–ò–≥—Ä–æ–∫ {player_name} –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n–ù–∞–ø–∏—à–∏ –≤ –¢–ü –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!</b></blockquote>")
    except AttributeError as e:
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        await bot.send_message(config.MAIN_ID,
                               f"<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote><b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ {player_name}!\n–ù–∞–ø–∏—à–∏ –≤ –¢–ü –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!</b></blockquote>")
    except Exception:
        await bot.send_message(config.MAIN_ID, "<b>[‚õî] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏!</b>")


async def handle_dice(message, bet_usd, bet_comment, player_id):
    dice_value = await bot.send_dice(chat_id=config.MAIN_ID)
    dice_value = dice_value.dice.value

    bet_type = bet_comment.split(" ")[1].lower()

    if bet_type == "–º–µ–Ω—å—à–µ":
        if dice_value in [1, 2, 3]:
            win_amount = bet_usd * config.cef
            try:
                await pay_money(win_amount, player_id)
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<b>‚ö†Ô∏è | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!</b>\n\n<blockquote><b>‚úÖ | –í—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫–æ–º –≤ –õ–°: @Last_dep_bot</b></blockquote>")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {e}")
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<blockquote><b>‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: @Last_dep_bot. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° –æ–¥–Ω–æ–º—É –∏–∑ –¢–°–û–í!</b></blockquote>")
        else:
            await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/lose.png", "rb"),
                                 caption="<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type == "–±–æ–ª—å—à–µ":
        if dice_value in [4, 5, 6]:
            win_amount = bet_usd * config.cef
            try:
                await pay_money(win_amount, player_id)
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<b>‚ö†Ô∏è | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!</b>\n\n<blockquote><b>‚úÖ | –í—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫–æ–º –≤ –õ–°: @Last_dep_bot</b></blockquote>")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {e}")
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<blockquote><b>‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: @Last_dep_bot. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° –æ–¥–Ω–æ–º—É –∏–∑ –¢–°–û–í!</b></blockquote>")
        else:
            await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/lose.png", "rb"),
                                 caption="<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["—á–µ—Ç", "—á–µ—Ç–Ω–æ–µ", "—á—ë—Ç"]:
        if dice_value in [2, 4, 6]:
            win_amount = bet_usd * config.cef
            try:
                await pay_money(win_amount, player_id)
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<b>‚ö†Ô∏è | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!</b>\n\n<blockquote><b>‚úÖ | –í—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫–æ–º –≤ –õ–°: @Last_dep_bot</b></blockquote>")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {e}")
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<blockquote><b>‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: @Last_dep_bot. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° –æ–¥–Ω–æ–º—É –∏–∑ –¢–°–û–í!</b></blockquote>")
        else:
            await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/lose.png", "rb"),
                                 caption="<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["–Ω–µ—á–µ—Ç", "–Ω–µ—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ"]:
        if dice_value in [1, 3, 5]:
            win_amount = bet_usd * config.cef
            try:
                await pay_money(win_amount, player_id)
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<b>‚ö†Ô∏è | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}$!</b>\n\n<blockquote><b>‚úÖ | –í—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫–æ–º –≤ –õ–°: @Last_dep_bot</b></blockquote>")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: {e}")
                await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/win.png", "rb"),
                                     caption=f"<blockquote><b>‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ: @Last_dep_bot. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° –æ–¥–Ω–æ–º—É –∏–∑ –¢–°–û–í!</b></blockquote>")
        else:
            await bot.send_photo(chat_id=config.MAIN_ID, photo=open("img/lose.png", "rb"),
                                 caption="<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    else:
        await bot.send_message(config.MAIN_ID,
                               "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå | –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –¢–°-—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.</b></blockquote>")


@dp.message_handler(commands=['create_invoice'])
async def create_invoice(message: types.Message):
    try:
        amount = float(message.text.split()[1])
        invoice = await cryptopay.create_invoice(asset='USDT', amount=amount)
        await message.reply(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã:\n{invoice.bot_invoice_url}")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /create_invoice <—Å—É–º–º–∞>")


@dp.message_handler(commands=['del_checks'])
async def delete_all_invoices(message: types.Message):
    checks = await cryptopay.get_checks(status='active')
    await message.reply(checks)


@dp.message_handler(commands=['pay_money'])
async def cmd_paymoney(message: types.Message):
    if message.from_user.id in config.ADMIN_IDS:
        amount = float(message.text.split(" ")[2])
        id = int(message.text.split(" ")[1])
        await pay_money(amount, id)
        await message.reply("–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã")
    else:
        await message.reply("<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote>–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</blockquote>")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)